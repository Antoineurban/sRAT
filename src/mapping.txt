com.backblaze.erasure.ByteInputOutputExpCodingLoop -> com.backblaze.erasure.a:
    9:9:void <init>() -> <init>
    18:40:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.ByteInputOutputTableCodingLoop -> com.backblaze.erasure.b:
    9:9:void <init>() -> <init>
    18:43:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.ByteOutputInputExpCodingLoop -> com.backblaze.erasure.c:
    9:9:void <init>() -> <init>
    18:28:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.ByteOutputInputTableCodingLoop -> com.backblaze.erasure.d:
    9:9:void <init>() -> <init>
    18:29:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.CodingLoop -> com.backblaze.erasure.e:
    com.backblaze.erasure.CodingLoop[] ALL_CODING_LOOPS -> do
    42:56:void <clinit>() -> <clinit>
    void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
    boolean checkSomeShards(byte[][],byte[][],int,byte[][],int,int,int,byte[]) -> do
com.backblaze.erasure.CodingLoopBase -> com.backblaze.erasure.f:
    15:15:void <init>() -> <init>
    27:40:boolean checkSomeShards(byte[][],byte[][],int,byte[][],int,int,int,byte[]) -> do
com.backblaze.erasure.Galois -> com.backblaze.erasure.g:
    int FIELD_SIZE -> do
    int GENERATING_POLYNOMIAL -> if
    short[] LOG_TABLE -> do
    byte[] EXP_TABLE -> do
    byte[][] MULTIPLICATION_TABLE -> do
    59:178:void <clinit>() -> <clinit>
    1299:1305:byte[][] generateMultiplicationTable():299:305 -> <clinit>
    1299:1305:void <clinit>():178 -> <clinit>
    24:24:void <init>() -> <init>
    185:185:byte add(byte,byte) -> do
    193:193:byte subtract$252a9a1(byte) -> do
    200:207:byte multiply(byte,byte) -> if
    215:227:byte divide$252a9a1(byte) -> if
    240:252:byte exp(byte,int) -> do
    260:275:short[] generateLogTable(int) -> do
    282:288:byte[] generateExpTable(short[]) -> do
    299:305:byte[][] generateMultiplicationTable() -> do
    315:325:java.lang.Integer[] allPossiblePolynomials() -> do
com.backblaze.erasure.GaloisTest -> com.backblaze.erasure.GaloisTest:
    18:18:void <init>() -> <init>
    26:26:void testClosure() -> do
    30:47:void testAssociativity() -> if
    51:56:void testIdentity() -> for
    60:71:void testInverse() -> int
    75:83:void testCommutativity() -> new
    87:100:void testDistributivity() -> try
    104:112:void testExp() -> byte
    116:127:void testGenerateLogTable() -> case
    131:137:void testMultiplicationTable() -> char
    142:149:void testWithPythonAnswers() -> else
com.backblaze.erasure.InputByteOutputExpCodingLoop -> com.backblaze.erasure.h:
    9:9:void <init>() -> <init>
    19:42:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.InputByteOutputTableCodingLoop -> com.backblaze.erasure.i:
    9:9:void <init>() -> <init>
    18:46:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.InputOutputByteExpCodingLoop -> com.backblaze.erasure.j:
    9:9:void <init>() -> <init>
    19:42:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.InputOutputByteTableCodingLoop -> com.backblaze.erasure.k:
    9:9:void <init>() -> <init>
    18:44:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
    54:88:boolean checkSomeShards(byte[][],byte[][],int,byte[][],int,int,int,byte[]) -> do
com.backblaze.erasure.Matrix -> com.backblaze.erasure.l:
    int rows -> do
    int columns -> if
    byte[][] data -> do
    45:52:void <init>(int,int) -> <init>
    57:70:void <init>(byte[][]) -> <init>
    76:80:com.backblaze.erasure.Matrix identity(int) -> do
    90:106:java.lang.String toString() -> toString
    119:130:java.lang.String toBigString() -> do
    137:137:int getColumns() -> do
    144:144:int getRows() -> if
    151:157:byte get(int,int) -> do
    164:171:void set(int,int,byte) -> do
    178:186:boolean equals(java.lang.Object) -> equals
    194:209:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix) -> do
    1137:1137:int getColumns():137:137 -> do
    1137:1137:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):194 -> do
    1144:1144:int getRows():144:144 -> do
    1144:1144:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):194 -> do
    2137:2137:int getColumns():137:137 -> do
    2137:2137:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):196 -> do
    2144:2144:int getRows():144:144 -> do
    2144:2144:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):197 -> do
    3144:3144:int getRows():144:144 -> do
    3144:3144:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):199 -> do
    4137:4137:int getColumns():137:137 -> do
    4137:4137:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):199 -> do
    5137:5137:int getColumns():137:137 -> do
    5137:5137:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):203 -> do
    6137:6137:int getColumns():137:137 -> do
    6137:6137:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):201 -> do
    6144:6144:int getRows():144:144 -> do
    6144:6144:com.backblaze.erasure.Matrix times(com.backblaze.erasure.Matrix):200 -> do
    216:228:com.backblaze.erasure.Matrix augment(com.backblaze.erasure.Matrix) -> if
    235:241:com.backblaze.erasure.Matrix submatrix$6ee9d4d9(int,int,int) -> do
    248:252:byte[] getRow(int) -> do
    259:265:void swapRows(int,int) -> do
    275:288:com.backblaze.erasure.Matrix invert() -> do
    299:346:void gaussianElimination() -> do
    6259:6265:void swapRows(int,int):259:265 -> do
    6259:6265:void gaussianElimination():305 -> do
com.backblaze.erasure.MatrixTest -> com.backblaze.erasure.m:
    int dataShardCount -> do
    int parityShardCount -> if
    int totalShardCount -> for
    com.backblaze.erasure.Matrix matrix -> do
    com.backblaze.erasure.CodingLoop codingLoop -> do
    byte[][] parityRows -> do
    13:13:void <init>() -> <init>
    17:21:void testIdentity() -> do
    25:26:void testBigString() -> if
    1119:1130:java.lang.String com.backblaze.erasure.Matrix.toBigString():119:130 -> if
    1119:1130:void testBigString():25 -> if
    30:43:void testMultiply() -> for
    47:61:void inverse() -> int
    65:86:void inverse2() -> new
    2030:2030:com.backblaze.erasure.ReedSolomon com.backblaze.erasure.ReedSolomon.create(int,int):30:30 -> do
    2036:2055:void com.backblaze.erasure.ReedSolomon.<init>(int,int,com.backblaze.erasure.CodingLoop):36:55 -> <init>
    2314:2321:com.backblaze.erasure.Matrix com.backblaze.erasure.ReedSolomon.buildMatrix(int,int):314:321 -> <init>
    2314:2321:void com.backblaze.erasure.ReedSolomon.<init>(int,int,com.backblaze.erasure.CodingLoop):50 -> <init>
    3061:3061:int com.backblaze.erasure.ReedSolomon.getDataShardCount():61:61 -> do
    3068:3068:int com.backblaze.erasure.ReedSolomon.getParityShardCount():68:68 -> if
    3075:3075:int com.backblaze.erasure.ReedSolomon.getTotalShardCount():75:75 -> for
    3090:3102:void com.backblaze.erasure.ReedSolomon.encodeParity(byte[][],int,int):90:102 -> do
    3115:3127:boolean com.backblaze.erasure.ReedSolomon.isParityCorrect(byte[][],int,int):115:127 -> do
    3146:3161:boolean com.backblaze.erasure.ReedSolomon.isParityCorrect(byte[][],int,int,byte[]):146:161 -> do
    3178:3270:void com.backblaze.erasure.ReedSolomon.decodeMissing(byte[][],boolean[],int,int):178:270 -> do
    3278:3300:void com.backblaze.erasure.ReedSolomon.checkBuffersAndSizes(byte[][],int,int):278:300 -> if
    3314:3321:com.backblaze.erasure.Matrix com.backblaze.erasure.ReedSolomon.buildMatrix(int,int):314:321 -> do
    3334:3340:com.backblaze.erasure.Matrix com.backblaze.erasure.ReedSolomon.vandermonde(int,int):334:340 -> do
    3334:3340:com.backblaze.erasure.Matrix com.backblaze.erasure.ReedSolomon.buildMatrix(int,int):314 -> do
    4334:4340:com.backblaze.erasure.Matrix com.backblaze.erasure.ReedSolomon.vandermonde(int,int):334:340 -> if
com.backblaze.erasure.OutputByteInputExpCodingLoop -> com.backblaze.erasure.n:
    9:9:void <init>() -> <init>
    18:30:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.OutputByteInputTableCodingLoop -> com.backblaze.erasure.o:
    9:9:void <init>() -> <init>
    18:32:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.OutputInputByteExpCodingLoop -> com.backblaze.erasure.p:
    9:9:void <init>() -> <init>
    18:37:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
com.backblaze.erasure.OutputInputByteTableCodingLoop -> com.backblaze.erasure.q:
    9:9:void <init>() -> <init>
    18:38:void codeSomeShards$12f4c3f5(byte[][],byte[][],int,byte[][],int,int) -> do
    48:78:boolean checkSomeShards(byte[][],byte[][],int,byte[][],int,int,int,byte[]) -> do
com.backblaze.erasure.ReedSolomon -> com.backblaze.erasure.r:
    int dataShardCount -> do
    int parityShardCount -> if
    int totalShardCount -> for
    com.backblaze.erasure.Matrix matrix -> do
    com.backblaze.erasure.CodingLoop codingLoop -> do
    byte[][] parityRows -> do
    30:30:com.backblaze.erasure.ReedSolomon create(int,int) -> do
    36:55:void <init>(int,int,com.backblaze.erasure.CodingLoop) -> <init>
    61:61:int getDataShardCount() -> do
    68:68:int getParityShardCount() -> if
    75:75:int getTotalShardCount() -> for
    90:102:void encodeParity$57ec96d9(byte[][],int) -> do
    115:127:boolean isParityCorrect$57ec96d5(byte[][],int) -> do
    146:161:boolean isParityCorrect$f0bcfce(byte[][],int,byte[]) -> do
    178:270:void decodeMissing$1092e686(byte[][],boolean[],int) -> do
    278:300:void checkBuffersAndSizes$57ec96d9(byte[][],int) -> if
    314:321:com.backblaze.erasure.Matrix buildMatrix(int,int) -> do
    1334:1340:com.backblaze.erasure.Matrix vandermonde(int,int):334:340 -> do
    1334:1340:com.backblaze.erasure.Matrix buildMatrix(int,int):314 -> do
    334:340:com.backblaze.erasure.Matrix vandermonde(int,int) -> if
    2027:2027:void com.backblaze.erasure.ReedSolomonTest.<init>():27:27 -> <init>
    2034:2037:void com.backblaze.erasure.ReedSolomonTest.testZeroSizeEncode():34:37 -> do
    2046:2070:void com.backblaze.erasure.ReedSolomonTest.testOneEncode():46:70 -> if
    2077:2085:void com.backblaze.erasure.ReedSolomonTest.testSimpleEncodeDecode():77:85 -> for
    2092:2103:void com.backblaze.erasure.ReedSolomonTest.testBigEncodeDecode():92:103 -> int
    2113:2143:void com.backblaze.erasure.ReedSolomonTest.runEncodeDecode(int,int,byte[][]):113:143 -> do
    2148:2169:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):148:169 -> do
    2148:2169:void com.backblaze.erasure.ReedSolomonTest.runEncodeDecode(int,int,byte[][]):141 -> do
    2242:2245:void com.backblaze.erasure.ReedSolomonTest.clearBytes(byte[]):242:245 -> do
    2242:2245:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):153 -> do
    2242:2245:void com.backblaze.erasure.ReedSolomonTest.runEncodeDecode(int,int,byte[][]):141 -> do
    2248:2252:void com.backblaze.erasure.ReedSolomonTest.checkShards(byte[][],byte[][]):248:252 -> do
    2248:2252:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):162 -> do
    2248:2252:void com.backblaze.erasure.ReedSolomonTest.runEncodeDecode(int,int,byte[][]):141 -> do
    3075:3075:int getTotalShardCount():75:75 -> do
    3075:3075:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):165 -> do
    3075:3075:void com.backblaze.erasure.ReedSolomonTest.runEncodeDecode(int,int,byte[][]):141 -> do
    3148:3169:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):148:169 -> do
    3242:3245:void com.backblaze.erasure.ReedSolomonTest.clearBytes(byte[]):242:245 -> do
    3242:3245:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):153 -> do
    3248:3252:void com.backblaze.erasure.ReedSolomonTest.checkShards(byte[][],byte[][]):248:252 -> do
    3248:3252:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):162 -> do
    4075:4075:int getTotalShardCount():75:75 -> do
    4075:4075:void com.backblaze.erasure.ReedSolomonTest.tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):165 -> do
    4178:4203:void com.backblaze.erasure.ReedSolomonTest.testCodingLoopsProduceSameAnswers():178:203 -> new
    4210:4238:byte[][] com.backblaze.erasure.ReedSolomonTest.computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):210:238 -> do
    5075:5075:int getTotalShardCount():75:75 -> do
    5075:5075:byte[][] com.backblaze.erasure.ReedSolomonTest.computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):211 -> do
    6061:6061:int getDataShardCount():61:61 -> do
    6061:6061:byte[][] com.backblaze.erasure.ReedSolomonTest.computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):212 -> do
    6068:6068:int getParityShardCount():68:68 -> do
    6068:6068:byte[][] com.backblaze.erasure.ReedSolomonTest.computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):213 -> do
    6242:6245:void com.backblaze.erasure.ReedSolomonTest.clearBytes(byte[]):242:245 -> do
    6248:6252:void com.backblaze.erasure.ReedSolomonTest.checkShards(byte[][],byte[][]):248:252 -> do
    6274:6286:java.util.List com.backblaze.erasure.ReedSolomonTest.allSubsets(int,int,int):274:286 -> do
    6290:6293:int[] com.backblaze.erasure.ReedSolomonTest.appendIntArrays(int[],int[]):290:293 -> do
    6290:6293:java.util.List com.backblaze.erasure.ReedSolomonTest.allSubsets(int,int,int):282 -> do
    7290:7293:int[] com.backblaze.erasure.ReedSolomonTest.appendIntArrays(int[],int[]):290:293 -> do
com.backblaze.erasure.ReedSolomonBenchmark -> com.backblaze.erasure.s:
    int DATA_COUNT -> do
    int PARITY_COUNT -> if
    int TOTAL_COUNT -> for
    int BUFFER_SIZE -> int
    int PROCESSOR_CACHE_SIZE -> new
    int TWICE_PROCESSOR_CACHE_SIZE -> try
    int NUMBER_OF_BUFFER_SETS -> byte
    long MEASUREMENT_DURATION -> do
    java.util.Random random -> do
    int nextBuffer -> case
    35:35:void <clinit>() -> <clinit>
    23:37:void <init>() -> <init>
    40:41:void main$3231c38a() -> do
    1045:1102:void run():45:102 -> do
    1045:1102:void main$3231c38a():40 -> do
    1157:1162:java.lang.String codingLoopNameToCsvPrefix(java.lang.String):157:162 -> do
    1157:1162:void run():88 -> do
    1157:1162:void main$3231c38a():40 -> do
    45:102:void run() -> if
    2157:2162:java.lang.String codingLoopNameToCsvPrefix(java.lang.String):157:162 -> if
    2157:2162:void run():88 -> if
    105:123:com.backblaze.erasure.ReedSolomonBenchmark$Measurement doOneEncodeMeasurement$16f88060(com.backblaze.erasure.MatrixTest,com.backblaze.erasure.ReedSolomonBenchmark$BufferSet[]) -> do
    127:149:com.backblaze.erasure.ReedSolomonBenchmark$Measurement doOneCheckMeasurement$17202479(com.backblaze.erasure.MatrixTest,com.backblaze.erasure.ReedSolomonBenchmark$BufferSet[],byte[]) -> do
    157:162:java.lang.String codingLoopNameToCsvPrefix(java.lang.String) -> do
    2170:2187:java.util.List splitCamelCase(java.lang.String):170:187 -> do
    2170:2187:java.lang.String codingLoopNameToCsvPrefix(java.lang.String):157 -> do
    170:187:java.util.List splitCamelCase(java.lang.String) -> do
    35:35:java.util.Random access$0() -> do
com.backblaze.erasure.ReedSolomonBenchmark$BufferSet -> com.backblaze.erasure.s$a:
    byte[][] buffers -> do
    byte[] bigBuffer -> do
    197:210:void <init>() -> <init>
com.backblaze.erasure.ReedSolomonBenchmark$Measurement -> com.backblaze.erasure.s$b:
    double megabytes -> do
    double seconds -> if
    217:220:void <init>() -> <init>
    222:225:void <init>(double,double) -> <init>
    228:230:void add(com.backblaze.erasure.ReedSolomonBenchmark$Measurement) -> do
    233:233:double getRate() -> do
    238:238:java.lang.String toString() -> toString
com.backblaze.erasure.ReedSolomonTest -> com.backblaze.erasure.t:
    27:27:void <init>() -> <init>
    34:37:void testZeroSizeEncode() -> do
    46:70:void testOneEncode() -> if
    77:85:void testSimpleEncodeDecode() -> for
    92:103:void testBigEncodeDecode() -> int
    113:143:void runEncodeDecode(int,int,byte[][]) -> do
    1148:1169:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):148:169 -> do
    1148:1169:void runEncodeDecode(int,int,byte[][]):141 -> do
    1242:1245:void clearBytes(byte[]):242:245 -> do
    1242:1245:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):153 -> do
    1242:1245:void runEncodeDecode(int,int,byte[][]):141 -> do
    1248:1252:void checkShards(byte[][],byte[][]):248:252 -> do
    1248:1252:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):162 -> do
    1248:1252:void runEncodeDecode(int,int,byte[][]):141 -> do
    2075:2075:int com.backblaze.erasure.ReedSolomon.getTotalShardCount():75:75 -> do
    2075:2075:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):165 -> do
    2075:2075:void runEncodeDecode(int,int,byte[][]):141 -> do
    148:169:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int) -> do
    2242:2245:void clearBytes(byte[]):242:245 -> do
    2242:2245:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):153 -> do
    2248:2252:void checkShards(byte[][],byte[][]):248:252 -> do
    2248:2252:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):162 -> do
    3075:3075:int com.backblaze.erasure.ReedSolomon.getTotalShardCount():75:75 -> do
    3075:3075:void tryAllSubsetsMissing$3d57e7b5(com.backblaze.erasure.MatrixTest,byte[][],byte[][],boolean[],int):165 -> do
    178:203:void testCodingLoopsProduceSameAnswers() -> new
    210:238:byte[][] computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest) -> do
    4075:4075:int com.backblaze.erasure.ReedSolomon.getTotalShardCount():75:75 -> do
    4075:4075:byte[][] computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):211 -> do
    5061:5061:int com.backblaze.erasure.ReedSolomon.getDataShardCount():61:61 -> do
    5061:5061:byte[][] computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):212 -> do
    5068:5068:int com.backblaze.erasure.ReedSolomon.getParityShardCount():68:68 -> do
    5068:5068:byte[][] computeParityShards$b766d53(byte[][],com.backblaze.erasure.MatrixTest):213 -> do
    242:245:void clearBytes(byte[]) -> do
    248:252:void checkShards(byte[][],byte[][]) -> do
    274:286:java.util.List allSubsets(int,int,int) -> do
    5290:5293:int[] appendIntArrays(int[],int[]):290:293 -> do
    5290:5293:java.util.List allSubsets(int,int,int):282 -> do
    290:293:int[] appendIntArrays(int[],int[]) -> do
com.backblaze.erasure.SampleDecoder -> com.backblaze.erasure.u:
    int DATA_SHARDS -> do
    int PARITY_SHARDS -> if
    int TOTAL_SHARDS -> for
    int BYTES_IN_INT -> int
    25:25:void <init>() -> <init>
    37:102:void main(java.lang.String[]) -> do
com.backblaze.erasure.SampleEncoder -> com.backblaze.erasure.v:
    int DATA_SHARDS -> do
    int PARITY_SHARDS -> if
    int TOTAL_SHARDS -> for
    int BYTES_IN_INT -> int
    31:31:void <init>() -> <init>
    42:95:void main(java.lang.String[]) -> do
